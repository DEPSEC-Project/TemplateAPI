name: Template Industrialisation workflow pour les pull requests vers le master

on:
  pull_request:
    branches: [ "master" ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest 
    strategy:
      matrix:
        python-version: [ "3.8", "3.9", "3.10","3.11"]
    steps:
      - name: Checkout le code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }} # test de plusieurs versions python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}  

      - name: Instalation des dépendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Définir les variables d'environnement
        run: |
          echo "FLASK_ENV=testing" >> $GITHUB_ENV
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> $GITHUB_ENV
          echo "TEST_DATABASE_URL=${{ secrets.TEST_DATABASE_URL }}" >> $GITHUB_ENV
          echo "FLASK_PORT=5000" >> $GITHUB_ENV

      - name: Test des fonctions de l'application
        id: test_app
        run: |
          python -m pytest tests/test_app.py

      - name: Test des endpoints de l'application
        id: test_endpoints
        run : |
          python -m pytest tests/test_endpoints.py

      - name: Déterminer la nouvelle version
        id: version
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          CURRENT_VERSION=$(git describe --tags --abbrev=0)
          if [[ "$BRANCH_NAME" == "develop" ]]; then
            MAJOR=$(echo "$CURRENT_VERSION" | cut -d'.' -f1 | sed 's/v//')
            MINOR=$(echo "$CURRENT_VERSION" | cut -d'.' -f2)
            PATCH=$(echo "$CURRENT_VERSION" | cut -d'.' -f3)
            NEW_VERSION="v$MAJOR.$((MINOR + 1)).0"
          elif [[ "$BRANCH_NAME" == hotfix/* ]]; then
            HOTFIX_VERSION=$(echo "$BRANCH_NAME" | sed 's/hotfix\///')
            NEW_VERSION="$HOTFIX_VERSION"
          elif [[ "$BRANCH_NAME" == release/* ]]; then
            RELEASE_VERSION=$(echo "$BRANCH_NAME" | sed 's/release\///')
            NEW_VERSION="$RELEASE_VERSION"
          else
            echo "Branche non reconnue, version inchangée."
            NEW_VERSION="$CURRENT_VERSION"
          fi
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          
      - name: Créer une nouvelle release
        uses: actions/create-release@v1
        if: ${{ steps.version.outputs.NEW_VERSION != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.NEW_VERSION }}
          release_name: Release ${{ steps.version.outputs.NEW_VERSION }}
          body: |
            Nouvelle version générée automatiquement.
          draft: false
          prerelease: false
        
          
      
